require:
   underscore ->
      defaults, clone, is-equal, defer, result, escape, extend, is-empty
      unique-id, iteratee, has, size
   ./Events
   ./util/model-helpers -> wrap-error
globals: encode-URI-component

;; Saucer.Model
;; --------------

;; Saucer **Models** are the basic data object in the framework --
;; frequently representing a row in a table in a database on your server.
;; A discrete chunk of data and a bunch of useful, related methods for
;; performing computations and transformations on that data.

;; Create a new model with the specified attributes. A client id (`cid`)
;; is automatically generated and assigned for you.
module.exports = class Model < Events:

   constructor(var attrs = {=}, options = {=}) =
      Events.call(@)
      @cid = unique-id(@cid-prefix)
      @attributes = {=}
      if options.collection: @collection = options.collection
      if options.parse: attrs = @parse(attrs, options) or {=}
      attrs = defaults({=}, attrs, result(@, .defaults))
      @set(attrs, options)
      @changed = {=}
      @initialize.apply(@, arguments)

   ;; A hash of attributes whose current and previous value differ
   changed = null

   ;; The value returned during the last failed validation
   validation-error = null

   ;; The default name for the JSON `id` attribute is `"id"`.  MongoDB and
   ;; CouchDB users may want to set this to `"_id"`.
   id-attribute = .id

   ;; The prefix is used to create the client id which is used to identify
   ;; models locally.  You may want to override this if you're experiencing name
   ;; clashes with model ids.
   cid-prefix = .c

   ;; Initialize is an empty function by default.  Override it with your own
   ;; initialization logic
   initialize = -> pass

   ;;  Return a copy of the model's `attributes` object
   to-JSON = options -> clone(@attributes)

   ;; Proxy `Saucer.Sync` by default -- but override this if you need custom
   ;; syncing semantics for *this* particular model.
   sync = -> pass
   ;; TODO: add Sync here
   ;; FIXME: Figure out how to only proxy if present.

   ;; Get the value of an attribute
   get = attr -> @attributes[attr]

   ;; Get the HTML-escaped value of an attribute
   escape = attr -> escape(@get(attr))

   ;; Returns `true` if the attribute contains a value that is not null
   ;; or undefined.
   has = attr -> not @get(attr) in {null, undefined}

   ;; Special-cased proxy to underscore's `_.matches` method
   matches = attrs -> Boolean! iteratee(attrs, @)(@attributes)

   ;; Set a hash of model attributes on the object, firing "change". This is the
   ;; core primitive operation of a model,  updating the data and notifying
   ;; anyone who needs to know about the change in state.  The heart of the
   ;; beast.
   set = (key, val = undefined, var options = {=}) ->
      if null? key or undefined? key: return this

      ;; Handle both `"key", value` and `{key = value}` style arguments
      attrs =
         if Object? key: [options = val; key]
         else: { '{key}' => val }

      ;; Run validation
      if not @_validate(attrs, options): return false
      {Boolean! unset, Boolean! silent} = {options??.unset, options??.silent}
      changes = {}
      changing = @_changing
      @_changing = true

      if not changing:
         {@_previous-attributes, @changed} = {clone(@attributes), {=}}

      this as {attributes => current, => changed, _previous-attributes => prev}

      ;; For each `set` attribute, update or delete the current vale
      for attr in attrs:
         let val = attrs[attr]

         if not is-equal(current[attr], val):
            changes.push(attr)

         if not is-equal(prev[attr], val):
            changed[attr] = val
         else:
            delete changed[attr]

         if unset:
            delete current[attr]
         else:
            current[attr] = val

      ;; Update the `id`
      @id = @get(@id-attribute)

      ;; Triggerl all relevant attribute changes
      if not silent:
         if changes.length: @_pending = options
         changes each c -> @trigger('change:{c}', @, current[c], options)

      ;; You might be wondering why there's a `while` loop here. Changes can
      ;; be recursively nested within `"change"` events
      if changing: return this
      if not silent:
         while @_pending:
            options = @_pending
            @_pending = false
            @trigger(.change, @, options)
      @_pending and @_changing = false
      @

   ;; Remove an attribute from the model, firing `"change"`. `unset` is a noop
   ;; if the attribute doesn't exist.
   unset = (attr, opts) -> @set(attr, undefined, {{} & opts} & { unset = true })

   ;; Clear all attributes on the model, firing `"change"`.
   clear = opts -> @set(attrs, (({} & opts) & {unset = true})) where
      attrs = [a = {=}; for key in @attributes: a[key] = undefined; a]

   ;; Determine if the model has changed since the last `"change"` event. If
   ;; you specify an attribute name, determine if that attribute has changed.
   has-changed = attr ->
      if null? attr: return not is-empty(@changed)
      has @changed: attr

   ;; Return an object containing all the attributes that have changed, or false
   ;; if there are no changed attributes.  Useful for determining what parts of
   ;; a view need to be pdated and/or what attributes need to be persisted to
   ;; the server.  Unset attributes will be set to the undefined.  You can also
   ;; pass an attributes object to diff against the model, determing if there
   ;; "would be" a change.
   changed-attributes = diff ->
      if not diff: return if {@has-changed(); clone(@changed); false}
      {old, changed} = {if {@changing; @_previous-attributes; @attributes}, {=}}
      keys(diff) each key and val is diff[key] ->
         if is-equal(old[key], val): continue
         changed[key] = val
      if {size(changed); changed; false}

   ;; Get the previous value of an attribute, recorded at the time the last
   ;; `"changed"` event was fired.
   previous = attr ->
      if null? attr or not @_previous-attributes: return null
      @_previous-attributes[attr]

   ;; Get all of the attributes of the model at the time of the previous
   ;; `"changed"` event.
   previous-attributes = -> clone(@_previous-attributes)

   ;; Fetch the model from the server, merging the response with the model's
   ;; local attributes,  Any changed attributes will trigger a "change" event.
   fetch = (var opts) ->
      {opts, model, {=> success}} = {extend {parse = true}: opts, @, opts}
      opts.success = resp ->
         server-attrs = if {opts.parse; model.parse(resp, opts); resp}
         if not model.set(server-attrs, opts): return false
         if success: success.call(opts.context, model, resp, opts)
         model.trigger(.sync, model, resp, opts)
      wrap-error(@, opts)
      @sync(.read, @, opts)

   ;; Set a hash of model attributes, and sync the model to the server. If the
   ;; server returns an attribute hash that differs, the model's state will be
   ;; `set` again.
   save = (key, val, var opts) ->
      ;; Handle both `"key", value` and `{key = value}` style args
      attrs =
         if null? key or Object? key: [opts = val; key]
         else: [a = {=}; a[key] = val; a]

      opts = extend {validate = true, parse = true}: opts
      opts as {=> wait}

      ;; If we're not waiting and attributes exist, save acts as
      ;; `set(attr).save(null, opts)` with validation.  Otherwise, check if the
      ;; model will be valid when the attributes, if any, are set.
      if attrs and not wait:
         if not @set(attrs, opts): return false
      else:
         if not @_validate(attrs, opts): return false

      ;; After a successful server-side save, the client is (optionally) updated
      ;; with the server-side state.
      {model, success, attributes} = {@, opts.success, @attributes}
      opts.success = resp ->
         ;; Ensure attributes are restored during synchronous saves
         model.attributes = attributes
         var server-attrs = if {opts.parse; model.parse(resp, opts); resp}
         if wait: server-attrs = extend({=}, attrs, server-attrs)
         if server-attrs and not model.set(server-attrs, opts): return false
         if success: success.call(opts.context, model, resp, opts)
         model.trigger(.sync, model, resp, opts)
      wrap-error(@, opts)

      ;; Set temporary attributes if `{wait = true}` to properly find new ids.
      if attrs and wait: @attributes = extend({}, attributes, attrs)

      method-name = if {@is-new(); .create; if {opts.patch; .patch; .update}}
      if method-name === .patch and not opts.attrs: opts.attrs = attrs
      xhr = @sync(method-name, @, opts)

      ;; Restore attributes
      @attributes = attributes

      xhr

   ;; Destroy this model on the server if it was already persisted.
   ;; Optimistically removes the model form its collection, if it has one. If
   ;; `wait = true` is passed, waits for the server to respond before removal.
   destroy = (var opts) ->
      opts >> clone(opts) = opts or {}
      {model, {=> success, => wait}} = {@, opts}

      destroy = ->
         model.stop-listening()
         model.trigger(.destroy, model, model.collection, opts)

      opts.success = resp ->
         if wait: destroy()
         if success: success.call(opts.context, model, resp, opts)
         if not model.is-new(): model.trigger(.sync, model, resp, opts)

      var xhr = false
      if @is-new(): defer(opts.success)
      else:
         wrap-error(@, opts)
         xhr = @sync(.delete, @, opts)
      if not wait: destroy()
      xhr

   ;; Default URL for the model's representation on the server -- if you're
   ;; using Saucer's restful methods, override this to change the endpoint
   ;; that will be called.
   url = ->
      base = result(@, .url-root) or result(@collection, .url)
      if not base:
         throw E.Saucer.Model.url('A "url" prop or fn must be specified')
      if @is-new(): return base
      else:
         base.replace(R"[^\/]$", '$&/')
         \ + encode-URI-component(@get(@id-attribute))

   ;; **parse** converts a response into the hash of attributes to be `set` on
   ;; the model.  The default implementation is just to pass the response along.
   parse = (resp, _) -> resp

   ;; Create a new model with identical attributes to this one.
   clone = -> @constructor(@attributes)

   ;; A model is new if it has never been saved to the server and lacks an id.
   is-new = -> not @has(@id-attribute)

   ;; Check if the model is currently in a valid state
   is-valid = opts -> @_validate({}, defaults({validate = true}, opts))

   ;; Run validation against the next complete set of model attributes,
   ;; returning `true` if all is well.  Otherwise, fire an "invalid" event.
   _validate = (var attrs, opts) ->
      v = opts??.validate or @validate
      if null? v or undefined? v:
         true
      else:
         attrs = {{} & @attributes} & attrs
         error and @validation-error = @validate(attrs, opts) or null
         if not error: true
         else:
            @trigger(.invalid, @, error, opts & {validation-error = error})
            false
