require:
   underscore -> {bind as _bind, is-empty, once as _once, size}

provide:
   internal-on, once-map, events-api, on-api, off-api, trigger-api


;; Guard the `listening` argument from the public api
internal-on = (obj, name, cb, context, listening) ->
   obj._events =
      events-api(on-api, obj._events or {=}, name, cb, opts) where
         opts = {= context, ctx = obj, = listening}
   if Object? listening:
      obj._listeners = obj._listeners or {=}
      obj._listeners[listening.id] = listening
   obj


;; Reduces the event callbacks into a map of `{event: onceWrapper}`.
;; `offer` unbinds the `onceWrapper` after it has been called.
once-map = (Object? map, String? name, callback, Function? offer) ->
   if callback:
      once and map[name] = _once with ->
         offer(name, once)
         callback.apply(this, arguments)
      once._callback = callback
   map


;; Iterates over the standard `event, callback` (as well as the fancy multiple
;; space-separated events `"change blur", callback` and jQuery-style event
;; maps `{event: callback}`).
events-api = (iteree, var events, match name, cb, opts) ->
   ;; Handle event maps
   Object? and names is keys(name) ->
      if not undefined? cb
      \ and opts.has-property(.context) and undefined? opts.context:
         opts.context = cb
      names each n -> events = events-api(iteree, events, n, name[n], opts)
      events
   ;; Handle space sep. event names by delegating them individually.
   R"\s+"? and names is name.split(R"\s+") ->
      names each name ->
         events = iteree(events, name, cb, opts)
      events
   ;; Standard events
   else ->
      events = iteree(events, name, cb, opts)
      events

;; The reducing API that adds a callback to the `events` object.
on-api = (events, name, callback, opts) ->
   if callback:
      handlers = events[name] or {}
      opts as {=> context, => ctx, => listening}
      if listening: listening.count++
      handlers.push({ = callback, = context, ctx = context or ctx, = listening })
      events[name] = handlers
   events

;; The reducing API that removes a callback from the `events` object.
off-api = (events, name, cb, opts) ->
   if not events: return
   var listening = undefined
   opts as {=> context, => listeners}

   ;; Delete all events listeners and "drop" events
   if not name and not cb and not context:
      for listener in listeners:
         listening = listeners[listener]
         delete listeners[listener]
         delete listening.listening-to[listening.obj-id]
      return

   names =
      if name: {name}
      else:    keys(events)
   names each n ->
      handlers = events[n]
      ;; Bail out if there are no events stored
      if undefined? handlers: break

      ;; Replace events if there are any reminaing. Otherwise, clean up.
      remaining = {}
      for handler of handlers:
         if Function? cb and not cb == handler.callback
         \               and not cb == handler.callback._callback
         \ or [context and not context == handler.context]:
            remaining.push(handler)
         else:
            if handler.listening and --handler.listening.count == 0:
               delete listeners[handler.listening.id]
               delete handler.listening.listening-to[handler.listening.obj-id]

      ;; Update tail event if the list has any events. Otherwise, clean up.
      if remaining.length:
         events[n] = remaining
      else: delete events[n]
   if size(events): return events

;; Handles triggering the appropriate event callbacks.
trigger-api = (obj-evts, name, cb, args) ->
   if obj-evts:
      events = obj-evts[name]
      var all-events = obj-evts.all
      if events and all-events: all-events = all-events.slice()
      if events: trigger-events(events, args)
      if all-events: trigger-events(all-events, {name} ++ args)
   obj-evts


;; A generalized translation of the optimized version of this function in
;; Backbone.  Not sure if it's effective or not but it is readable.
trigger-events = (events, args) ->
   evts = events.slice()
   match args.length:
      0 -> evts each event -> event.callback.call(event.ctx)
      1 -> evts each event -> event.callback.call(event.ctx) with args[0]
      2 -> evts each event -> event.callback.call(event.ctx) with
         [args[0], args[1]]
      3 -> evts each event -> event.callback.call(event.ctx) with
         [args[0], args[1], args[2]]
      else -> evts each event -> event.callback.apply(event.ctx, args)
