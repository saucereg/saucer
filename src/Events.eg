require:
   underscore ->
      bind as _bind
      once as _once
      is-empty, size
      unique-id
   ./util/Events ->
      internal-on, events-api, on-api, off-api, trigger-api, once-map

;; Saucer.Events
;; -------------

;; A class to extend from in order to provide a custom event channel. You may
;; bind a callback to an event with `on` or remove with `off`; `trigger`-ing an
;; event fires all callbacks in succession.
;;
;;    class Counter < Event:
;;       counter = 0
;;    my-counter = Counter()
;;    my-counter.on(.count) with -> my-counter.counter += 1
;;    my-counter.trigger(.count)
;;
module.exports = class Events:
   ;; Bind an event to a `cb` function.  Passing `"all"` will bind
   ;; the callback to all events fired.
   on = (name, cb, context) -> internal-on(@, name, cb, context)
   ;; TODO: add `bind` alias


   ;; Bind an event to only be triggered a single time. After the first time
   ;; the callback is invoked, its Object?  for a combination of all events.
   once = (name, cb, context) ->
      @on(events, undefined, context) where events =
         ;; Map the event into a `{event: once}` object.
         events-api(once-map, {=}, name, cb, _bind(@off, @))

   ;; Inversion-of-control version of `on`. Tell *this* object to listen to
   ;; an event in another object... keeping track of what it's listening to
   ;; for easier unbinding later.
   listen-to = (obj, name, cb) ->
      if not obj: return this
      obj._listen-id = obj._listen-id or unique-id(.l)
      @_listening-to = @_listening-to or {=}
      var listening = @_listening-to[obj._listen-id]

      ;; This object is not listening to any other events on `obj` yet.
      ;; Setup the necessary references to track the listening callbacks.
      if undefined? @_listening-to[obj._listen-id]:
         @_listen-id = @_listen-id or unique-id(.l)
         listening = {
            obj = obj
            obj-id = obj._listen-id
            id = @_listen-id
            listening-to = @_listening-to
            count = 0
         }
         @_listening-to[obj._listen-id] = listening

      ;; Bind callbacks on obj and keep track of them on listening
      internal-on(obj, name, cb, @, listening)
      @


   ;; Inversion-of-control versions of `once`.
   listen-to-once = (obj, name, cb) ->
      @listen-to(obj, events) where events =
         ;; Map the event into a `{event: once}` object.
         events-api(once-map, {=}, name, cb, _bind(@stop-listening, @, obj))


   ;; Remove one or many callbacks. If `context` is null, removes all
   ;; callbacks with that function. If `callback` is null, removes all
   ;; callbacks for the event. If `name` is null, removes all bound
   ;; callbacks for all events.
   off = (name, cb, context) ->
      if not @_events: return this
      @_events = events-api(off-api, @_events, name, cb, opts) where opts = {
         context = context
         listeners = @_listeners
      }
      @


   ;; Tell this object to stop listening to either specific events ... or
   ;; to every object it's currently listening to.
   stop-listening = (obj, name, cb) ->
      listening-to = @_listening-to
      if not listening-to: return this
      ids = if {obj; { obj._listen-id }; keys(listening-to)}
      ids each id ->
         if listening-to[id] as listening: listening.obj.off(name, cb, @)
      if is-empty? listening-to: @_listening-to = undefined
      @


   ;; Trigger one or many events, firing all bound callbacks. Callbacks are
   ;; passed the same arguments as `trigger` is, apart from the event name
   ;; (unless you're listening on `"all"`, which will cause your callback to
   ;; receive the true name of the event as the first argument).
   trigger = (name, *args) ->
      if not @_events: return this
      events-api(trigger-api, @_events, name, undefined, args)
      @
