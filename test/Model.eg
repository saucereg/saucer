
require-macros:
   earl-mocha ->
      describe, it, before, after
      xdescribe, xit
      assert, asserts

require:
   underscore -> {size, debounce}
   ../src/Saucer

init-one-col = Saucer.Collection()

class InitOneModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   initialize = ->
      @one = 1
      assert @collection == init-one-col

class InitTwoModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   initialize = (attributes, options) ->
      @one = options.one

class InitParseModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   parse = attrs -> [attrs.value += 1; attrs]

class InitDefaultModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   defaults = {
      first-name = .Unknown
      last-name  = .Unknown
   }

class ParseNullModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   parse = attrs -> [attrs.value += 1; null]

describe "Saucer.Model":

   it "initializes":
      m = InitOneModel({=}, {collection = init-one-col})
      assert m.one == 1
      assert m.collection == init-one-col

   it "initializes with attributes and options":
      m = InitTwoModel({=}, {one = 1})
      assert m.one == 1

   it "initializes with parsed attributes":
      m = InitParseModel({value = 1}, {parse = true})
      assert m.get(.value) == 2

   it "initializes with defaults":
      m = InitDefaultModel({first-name = .John})
      assert m.get(.first-name) == .John
      assert m.get(.last-name)  == .Unknown

   it "can return null with `parse`":
      m = ParseNullModel({value = 1}, {parse = true})
      assert JSON.stringify(m.to-JSON()) == "{}"


class Proxy < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
class Klass < Saucer.Collection:
   constructor() = Saucer.Collection.apply(@, arguments)
   url = -> "/collection"
class UrlRootModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   url-root = '/collection'
class UrlRootFnModel < Saucer.Model:
   constructor() = Saucer.Model.apply(@, arguments)
   url-root = -> '/nested/{@get(.parent-id)}/collection'

describe "Saucer.Model.url()":
   before:
      @doc = Proxy() with {
         id     = '1-the-tempest'
         title  = "The Tempest"
         author = "Bill Shakespeare"
         length = 123
      }
      @collection = Klass();
      @collection.add(@doc);

   it "builds model representations as urls":
      @doc.url-root = null
      assert @doc.url() == "/collection/1-the-tempest"
      @doc.collection.url = "/collection/"
      assert @doc.url() == "/collection/1-the-tempest"
      @doc.collection = null
      try:
         @doc.url()
      catch e:
         assert not undefined? e
      @doc.collection = @collection

   it "can be used with url-root and url-encoding":
      m = UrlRootModel()
      assert m.url() == '/collection'
      m.set({id = "+1+"})
      assert m.url() == '/collection/%2B1%2B'

   it "can access url-root as a function":
      m = UrlRootFnModel({parent-id = 1})
      assert m.url() == '/nested/1/collection'
      m.set({id = 2})
      assert m.url() == '/nested/1/collection/2'

describe "Saucer.Model.clone()":

   it "creates a copy of a model":
      a = Saucer.Model() with { foo = 1, bar = 2, baz = 3 }
      b = a.clone()
      asserts:
         a.get(.foo) == 1
         a.get(.bar) == 2
         a.get(.baz) == 3
         b.get(.foo) == a.get(.foo)
         b.get(.bar) == a.get(.bar)
         b.get(.baz) == a.get(.baz)
      a.set({foo = 100})
      asserts:
         a.get(.foo) == 100
         b.get(.foo) == 1

      foo = Saucer.Model() with { p = 1 }
      bar = Saucer.Model() with { p = 2 }
      bar.set(foo.clone().attributes, {unset = true})
      asserts:
         foo.get(.p) == 1
         bar.get(.p) == undefined

describe "Saucer.Model.is-new()":

   it "checks if a Model has a set `id` or not":
      a = Saucer.Model() with { foo = 1, bar = 2, baz = 3}
      assert a.is-new() == true

   it "will return true no matter if the id is negative or positive":
      a = Saucer.Model() with { foo = 1, bar = 2, baz = 3, id = -5 }
      assert a.is-new() != true

   it "will return true even if the id is zero":
      a = Saucer.Model() with { foo = 1, bar = 2, baz = 3, id = 0 }
      assert a.is-new() != true

describe "Saucer.Model.get()":
   before:
      @doc = Proxy() with {
         id     = '1-the-tempest'
         title  = "The Tempest"
         author = "Bill Shakespeare"
         length = 123
      }

   it "gets an attribute by the attributes name":
      assert @doc.get(.title) == "The Tempest"
      assert @doc.get(.author) == "Bill Shakespeare"

   it "returns undefined if there is no attribute by that name":
      assert @doc.get(.not-an-attribute) == undefined
