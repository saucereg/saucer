
require-macros:
   earl-mocha ->
      describe, it, before, after
      xdescribe, xit
      assert, asserts

require:
   underscore -> {size, debounce}
   ../src/saucer -> Saucer

class CounterClass < Saucer.Events:
   counter = 0

describe "Saucer.Events":

   it "provides `on` to add events and `trigger` to trigger them":
      obj = CounterClass()
      obj.on(.event) with -> obj.counter += 1
      obj.trigger(.event)
      assert obj.counter == 1
      0..3 each _ -> obj.trigger(.event)
      assert obj.counter == 5

   it "can bind and trigger multiple events":
      obj = CounterClass()
      obj.on("a b c") with -> obj.counter += 1

      ;; FIXME: This __doesn't__ trigger `a` properly
      obj.trigger(.a)
      assert obj.counter == 1

      obj.trigger("a b")
      assert obj.counter == 3

      obj.trigger(.c)
      assert obj.counter == 4

      obj.off("a c")
      obj.trigger("a b c")
      assert obj.counter == 5

   it "can bind and trigger events with an event map":
      obj = CounterClass()
      method increment = -> @counter += 1
      obj.on(evt-map, obj) where evt-map = {
         a = increment
         b = increment
         c = increment
      }

      obj.trigger(.a)
      assert obj.counter === 1

      obj.trigger("a b")
      assert obj.counter === 3

      obj.trigger(.c)
      assert obj.counter === 4

      obj.off(off-evt-map, obj) where off-evt-map = {
         a = increment
         b = increment
      }
      obj.trigger("a b c")
      assert obj.counter === 5

   it "can bind and trigger multiple event names with event maps":
      obj = CounterClass()
      method increment = -> @counter += 1

      obj.on({ "a b c" => increment })

      obj.trigger(.a)
      assert obj.counter === 1

      obj.trigger("a b")
      assert obj.counter === 3

      obj.trigger(.c)
      assert obj.counter === 4

      obj.off({ "a c" => increment })

      obj.trigger("a b c")
      assert obj.counter === 5

   it "can bind and trigger with event map and a context":
      obj = CounterClass()
      context = {}

      obj.on(evt-map, context).trigger(.a) where evt-map = {
         a = -> assert this === context
      }

      obj.off()
      obj.on(evt-map, this, context).trigger(.a) where evt-map = {
         a = -> assert this === context
      }

   it "can listen-to and stop-listening":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      a.listen-to(b, .all, increment)
      b.trigger(.anything)
      a.listen-to(b, .all, increment)
      a.stop-listening()
      b.trigger(.anything)
      asserts:
         a.counter === 1
         b.counter === 0

   it "can listen-to and stop-listening with event maps":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      a.listen-to(b, { event = increment })
      b.trigger(.event) ;; a = 1
      a.listen-to(b, { event2 = increment })
      b.on(.event2, increment)
      a.stop-listening(b, { event2 = increment })
      b.trigger("event event2") ;; a = 2; b = 1
      b.stop-listening()
      b.trigger("event event2") ;; a = 3; b = 1
      asserts:
         a.counter === 3
         b.counter === 1

   it "can listen-to and stop-listening with omitted args":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      a.listen-to(b, .event, increment)
      b.on(.event, increment)
      a.listen-to(b, .event2, increment)
      a.stop-listening(null, { event = increment })
      b.trigger("event event2") ;; a = 1; b = 1
      b.off()
      a.listen-to(b, "event event2", increment)
      a.stop-listening(null, .event)
      a.stop-listening()
      b.trigger(.event2)
      asserts:
         a.counter === 1
         b.counter === 1

   it "can listen-to-once and stop-listening":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      method decrement = -> @counter -= 1
      a.listen-to-once(b, .all, increment)
      b.trigger(.anything)
      b.trigger(.anything)
      a.listen-to-once(b, .all, decrement)
      a.stop-listening()
      b.trigger(.anything)
      asserts:
         a.counter === 1
         b.counter === 0

   it "can listen-to, listen-to-once, and stop-listening":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      method decrement = -> @counter -= 1
      a.listen-to-once(b, .all, increment)
      b.trigger(.anything)
      b.trigger(.anything)
      a.listen-to(b, .all, decrement)
      b.trigger(.anything)
      b.trigger(.anything)
      a.stop-listening()
      b.trigger(.anything)
      asserts:
         a.counter === -1
         b.counter === 0

   it "can listen-to and stop-listening with event maps":
      a = CounterClass()
      b = CounterClass()
      method increment = -> @counter += 1
      method decrement = -> @counter -= 1
      a.listen-to(b) with { change = increment }
      b.trigger(.change) ;; a = 1
      a.listen-to(b) with { lower  = decrement }
      a.listen-to(b) with { higher = increment }
      b.trigger("higher change") ;; a = 3
      b.trigger(.lower) ;; a = 2
      b.trigger(.lower) ;; a = 1
      a.stop-listening()
      b.trigger("higher change") ;; a = 1
      asserts:
         a.counter === 1
         b.counter === 0

   it "can listen-to itself":
      e = CounterClass()
      method increment = -> @counter += 1
      e.listen-to(e, .foo, increment)
      e.trigger(.foo) ;; e = 1
      assert e.counter === 1

   it "can listen-to itself cleans itself up with stop-listening":
      e = CounterClass()
      method increment = -> @counter += 1
      e.listen-to(e, .foo, increment)
      e.trigger(.foo)
      e.stop-listening()
      e.trigger(.foo)
      assert e.counter === 1

   it "can stop-listening to clean up references":
      a = Saucer.Events()
      b = Saucer.Events()

      b.on(.event) with -> pass
      a.listen-to(b, .event, -> pass).stop-listening()
      asserts:
         size(b._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      a.listenTo(b, 'event', -> pass).stopListening(b);
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      a.listenTo(b, 'event', -> pass).stopListening(b, 'event');
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      fn = -> pass
      a.listenTo(b, 'event', fn).stopListening(b, 'event', fn);
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

   it "can use stop-listening to clean up references from listen-to-once":
      a = Saucer.Events()
      b = Saucer.Events()
      fn = -> pass
      a.listen-to-once(b, .event, fn).stop-listening()
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      a.listen-to-once(b, .event, fn).stop-listening(b)
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      a.listen-to-once(b, .event, fn).stop-listening(b, 'event')
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

      a.listen-to-once(b, .event, fn).stop-listening(b, 'event', fn)
      asserts:
         size(a._listening-to) === 0
         size(b._events.event) === 1
         size(b._listeners) === 0

   it "can `listen-to` and use `off` to clean up references":
      a = Saucer.Events()
      b = Saucer.Events()
      fn = -> pass

      a.listenTo(b, .event, fn)
      b.off()
      asserts:
         size(a._listening-to) === 0
         size(b._listeners) === 0

      a.listenTo(b, .event, fn)
      b.off(.event)
      asserts:
         size(a._listening-to) === 0
         size(b._listeners) === 0

      a.listenTo(b, .event, fn)
      b.off(null, fn)
      asserts:
         size(a._listening-to) === 0
         size(b._listeners) === 0

      a.listenTo(b, .event, fn)
      b.off(null, null, a)
      asserts:
         size(a._listening-to) === 0
         size(b._listeners) === 0

   it "can `listen-to` and `stop-listening` can clean up references":
      a = Saucer.Events()
      b = Saucer.Events()
      a.listen-to(b, .all, -> assert true)
      b.trigger(.anything)
      a.listen-to(b, .other, -> assert false)
      a.stop-listening(b, .other)
      b.trigger(.other)
      a.stop-listening(b, .all)
      assert size(a._listening-to) === 0

   it "can `listen-to-once` w/o context and refs are cleaned after event fires":
      a = Saucer.Events()
      b = Saucer.Events()
      a.listen-to-once(b, .all, -> assert true)
      b.trigger(.anything)
      assert size(a._listening-to) === 0

   it "can listen-to-once with event map and refs are cleaned":
      a = Saucer.Events()
      b = Saucer.Events()
      a.listen-to-once(b, evt-map) where evt-map = {
         one = -> assert true
         two = -> assert false
      }
      b.trigger(.one)
      assert size(a._listening-to) === 1

   it "can use listen-to-once with event maps and it binds the correct `this`":
      a = Saucer.Events()
      b = Saucer.Events()
      a.listenToOnce(b) with {
         one = -> assert this === a
         two = -> assert false
      }
      b.trigger(.one)

   it "can listen-to with empty cb and doesn't throw an error":
      e = Saucer.Events()
      e.listen-to(e, .foo, undefined)
      try:
         e.trigger(.foo)
      catch e:
         assert false
      assert true

   it "can trigger all for each event":
      e = CounterClass()
      e.a = false
      e.b = false
      method f = evt ->
         @counter += 1
         if evt == .a: @a = true
         if evt == .b: @b = true
      e.on(.all, f).trigger("a b")
      asserts:
         true? e.a
         true? e.b
         e.counter == 2

   it "can use on and then turn off all functions":
      obj = CounterClass()
      method increment = -> @counter += 1
      obj.on(.event, increment)
      obj.trigger(.event) ;; 1
      obj.off(.event, increment)
      obj.trigger(.event)
      assert obj.counter == 1

   it "can bind two callbacks, and turn off only one":
      obj = Saucer.Events()
      obj.a = 0
      obj.b = 0
      inc-a = @-> @a += 1
      inc-b = @-> @b += 1
      obj.on(.event, inc-a)
      obj.on(.event, inc-b)
      obj.trigger(.event)
      obj.off(.event, inc-a)
      obj.trigger(.event)
      obj.off(.event, inc-b)
      obj.trigger(.event)
      asserts:
         obj.a == 1
         obj.b == 2

   it "can turn off a callback in the midst of it firing":
      obj = CounterClass()
      method f = ->
         @counter += 1
         @off(.event, f)
      obj.on(.event, f)
      obj.trigger(.event)
      obj.trigger(.event)
      obj.trigger(.event)
      assert obj.counter == 1

   it "can do two binds that unbind themselves":
      obj = Saucer.Events()
      obj.a = 0
      obj.b = 0
      inc-a = @-> [@a += 1; @off(.event, inc-a)]
      inc-b = @-> [@b += 1; @off(.event, inc-b)]
      obj.on(.event, inc-a)
      obj.on(.event, inc-b)
      obj.trigger(.event)
      obj.trigger(.event)
      obj.trigger(.event)
      asserts:
         obj.a == 1
         obj.b == 1

   it "can bind a callback w/ a supplied context":
      a = Saucer.Events()
      b = CounterClass()
      a.on(.event, @-> @counter += 1, b)
      a.trigger(.event)
      assert b.counter == 1

   it "can do a nested trigger with unbind":
      obj = CounterClass()
      method incr1 = ->
         @counter += 1
         @off(.event, incr1)
         @trigger(.event)
      method incr2 = ->
         @counter += 1
      obj.on(.event, incr1)
      obj.on(.event, incr2)
      obj.trigger(.event)
      assert obj.counter == 3
      obj.off()

   it "will not alter its callback list during trigger":
      obj = CounterClass()
      method incr     = -> @counter += 1
      method incr-on  = -> @on( "event all", incr)
      method incr-off = -> @off("event all", incr)
      obj.on("event all", incr-on)
      obj.trigger(.event)
      assert obj.counter == 0 ;; on does not alter cb list
      obj.off()
      obj.on(.event, incr-off).on("event all", incr).trigger(.event)
      assert obj.counter == 2 ;; off does not alter callback list

   it "retrieves `all` cb list after each event":
      obj = CounterClass()
      method incr = -> @counter += 1
      obj.on(.x) with ->
         obj.on(.y, incr).on(.all, incr)
      obj.trigger("x y")
      assert obj.counter === 2

   it "does nothing if no cb is provided":
      obj = Saucer.Events()
      obj.on(.test).trigger(.test)

   it "will throw an error if a cb is truthy but not a function":
      view = Saucer.Events()
      view.on(.test, .noop)
      var e = undefined
      try:
         view.trigger(.test)
      catch err: e = err
      assert not undefined? e

   it "can remove all events for a specific context":
      obj = Saucer.Events()
      obj.on("x y all", -> assert true)
      obj.on("x y all", -> assert false, obj)
      obj.off(null, null, obj)
      obj.trigger("x y")

   it "can remove all events from a specific callback":
      obj = Saucer.Events()
      method success = -> @msg = .success
      method failure = -> @err = .failure
      obj.on("x y all", success)
      obj.on("x y all", failure)
      obj.off(null, failure)
      obj.trigger("x y")
      asserts:
         obj.msg === .success
         obj.err === undefined

   it "will not skip consecutive events with off":
      obj = Saucer.Events()
      obj.val = undefined
      obj.on(.event, @-> @val = .error, obj)
      obj.on(.event, @-> @val = .error, obj)
      obj.off(null, null, obj)
      obj.trigger(.event)
      assert undefined? obj.val

   it "is inherited by the main Saucer objct":
      assert Saucer.on === Saucer.Events.prototype.on

   it "will not run if `listen-to-once` has no callback":
      obj = Saucer.Events()
      obj.listen-to-once(obj, .event).trigger(.event)

   it "can chain event functions":
      a = Saucer.Events()
      b = Saucer.Events()
      fn = -> pass
      asserts:
         a === a.trigger(.no-events-set-yet)
         a === a.off(.no-events-set-yet)
         a === a.stop-listening(.no-events-set-yet)
         a === a.on(.a, fn)
         a === a.once(.c, fn)
         a === a.trigger(.a)
         a === a.listen-to(b, .a, fn)
         a === a.listen-to-once(b, .b, fn)
         a === a.off("a c")
         a === a.stop-listening(b, .a)
         a === a.stop-listening()

   it "can listen-to-once with space-sep events":
      one = Saucer.Events()
      two = Saucer.Events()
      count = 1
      one.listen-to-once(two, "x y", n -> assert n === count++)
      two.trigger(.x, 1)
      two.trigger(.x, 1)
      two.trigger(.y, 2)
      two.trigger(.y, 2)



describe "Saucer.Events.once":

   it "can be used to only trigger an event once":
      obj = Saucer.Events()
      {obj.a, obj.b} = {0, 0}
      method incr-a = -> [@a += 1; @trigger(.event)]
      method incr-b = -> @b += 1
      obj.once(.event, incr-a)
      obj.once(.event, incr-b)
      obj.trigger(.event)
      asserts:
         obj.a == 1
         obj.b == 1

   it "will properly execute only one time compared to `on`":
      a = CounterClass()
      b = CounterClass()
      method incr = -> @counter += 1
      a.once(.event, incr)
      b.on(.event, incr)

      a.trigger(.event)
      a.trigger(.event)

      b.trigger(.event)
      b.trigger(.event)

      asserts:
         a.counter == 1
         b.counter == 2

   it "can be used with `off`":
      obj = Saucer.Events()
      obj.failure = undefined
      method f = -> @failure = true
      obj.once(.event ,f)
      obj.off(.event, f)
      obj.trigger(.event)
      assert undefined? obj.failure

   it "can be used with event maps":
      obj = CounterClass()
      method incr = -> @counter += 1

      obj.once(evt-map, obj) where evt-map = {
         a = incr
         b = incr
         c = incr
      }

      obj.trigger(.a)
      assert obj.counter == 1

      obj.trigger("a b")
      assert obj.counter == 2

      obj.trigger(.c)
      assert obj.counter == 3

      obj.trigger("a b c")
      assert obj.counter == 3

   it "can be used with off by context":
      context = {=}
      obj = Saucer.Events()
      obj.once(.event, -> assert false, context)
      obj.off(null, null, context)
      obj.trigger(.event)

   it "can work with async events": done ->
      e = CounterClass()
      method f = -> debounce(-> @counter += 1, 50)
      e.once(.async, f)
      e.trigger(.async)
      e.trigger(.async)
      assert e.counter === 1
      done()

   it "will work with multiple events":
      obj = CounterClass()
      obj.once("x y", @-> @counter += 1)
      obj.trigger("x y")
      assert obj.counter == 2

   it "will properly take itself out of iteration upon firing":
      obj = CounterClass()
      method incr-one = -> @counter += 1
      method incr-two = -> @counter += 2
      obj.on(.event, incr-one)
      obj.once(.event, incr-two)
      obj.on(.event, incr-two)
      obj.trigger(.event)
      obj.trigger(.event)
      assert obj.counter == 8

   it "works with `all`":
      obj = CounterClass()
      obj.once(.all, @-> [@counter += 1; obj.trigger(.all)], obj)
      obj.trigger(.anything)
      assert obj.counter == 1

   it "is a noop without a callback":
      obj.once(.event).trigger(.event) where obj = Saucer.Events()
